// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

model User {
  id             String       @id @default(uuid()) @db.Uuid
  email          String       @unique @db.VarChar(320)
  password       String       @db.VarChar(255)
  role           UserRole
  createdAt      DateTime     @default(now())
  organizationId String       @db.Uuid
  Organization   Organization @relation("OrganizationUsers", fields: [organizationId], references: [id])
  Favorite       Favorite[]

  @@map("users")
}

model Artist {
  id       String     @id @default(uuid()) @db.Uuid
  name     String     @db.VarChar(255)
  grammy   Int        @default(0)
  hidden   Boolean    @default(false)
  albums   Album[]
  tracks   Track[]
  Favorite Favorite[]

  @@map("artists")
}

model Album {
  id       String     @id @default(uuid()) @db.Uuid
  name     String     @db.VarChar(255)
  year     Int
  hidden   Boolean    @default(false)
  artistId String     @db.Uuid
  artist   Artist     @relation(fields: [artistId], references: [id])
  tracks   Track[]
  Favorite Favorite[]

  @@map("albums")
}

model Track {
  id       String     @id @default(uuid()) @db.Uuid
  name     String     @db.VarChar(255)
  duration Int
  hidden   Boolean    @default(false)
  albumId  String     @db.Uuid
  album    Album      @relation(fields: [albumId], references: [id])
  artistId String     @db.Uuid
  artist   Artist     @relation(fields: [artistId], references: [id])
  Favorite Favorite[]

  @@map("tracks")
}

enum FavoriteCategory {
  ARTIST
  ALBUM
  TRACK
}

model Favorite {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @db.Uuid
  artistId  String?          @db.Uuid
  albumId   String?          @db.Uuid
  trackId   String?          @db.Uuid
  category  FavoriteCategory
  user      User             @relation(fields: [userId], references: [id])
  artist    Artist?          @relation(fields: [artistId], references: [id])
  album     Album?           @relation(fields: [albumId], references: [id])
  track     Track?           @relation(fields: [trackId], references: [id])
  createdAt DateTime         @default(now())

  @@unique([userId, artistId, albumId, trackId])
  @@map("favorites")
}

model Organization {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  users     User[]   @relation("OrganizationUsers")

  @@map("organizations")
}
